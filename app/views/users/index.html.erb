<!--
You can pass your search object right into form_for or remote_form_for and it will do the rest. Just like passing an ActiveRecord attribute. Use it the same way:

Need to scope the search? form_for([@current_user, @search])
Want to specify your own url? form_for(@search, :url => whatever_path)
Need to specify your own name? form_for(:whatever, @search)

The beauty of this is that it recoginizes that its a search object and helps you out. It adds 3 hidden fields for you:

1. order_by
2. order_as
2. per_page

This way when people start a new search those 3 things will be "remembered" and the results will be displayed in that manner.
-->
<% form_for @search do |f| %>
    <fieldset>
        <legend>Search</legend>
        
        <% f.fields_for @search.conditions do |users| %>
            <!--
            You can specify ANY of the conditions available on ANY of the attributes. Adding a condition and having it be a part
            of the search is as simple as adding another form element.
            -->
            First name:<br />
            <%= users.text_field :first_name_keywords %><br />
            <br />
            
            First name sounds like: (try &quot;bin&quot;, this is a custom condition, checkout config/initializers/searchgasm.rb)<br />
            <%= users.text_field :first_name_sounds_like %><br />
            <br />
            
            Last name:<br />
            <%= users.text_field :last_name_keywords %><br />
            <br />
            
            Email ends with:<br />
            <%= users.text_field :email_ends_with %><br />
            <br />
            
            Created after:<br />
            <%= users.calendar_date_select :created_after %><br /> <!-- # nice rails plugin for replacing date_select -->
            <br />
            
            <!--
            You can traverse through your relationships to set conditions. For example, the condition below will add the following condition:
            
            "return users that have orders with a total greater than X"
            
            You could keep going through your relationships. If order has many line items you could do:
            
            orders.fields_for orders.object.line_items do |line_item|
            -->
            <% users.fields_for users.object.orders do |orders| %>
                Has orders with a total greater than:<br />
                $<%= orders.text_field :total_gt %><br />
                <br />
            <% end %>
            <%= f.submit "Search" %>
        <% end %>
    </fieldset>
<% end %>

<% if @users_count > 0 %>
    <%= @users_count %> users found
    <table>
        <tr>
            <!--
            order_by allows you to create a link to order the data by that coloumn. You aren't limited to the local columns. Since users belong to user groups we could do
            
            order_by(:user_group => :name)
            
            You can traverse through your relationships to define how things are ordered. There are a lot of options for this to allow you to customize it to your liking. Please
            glance at the Searchgasm::Helpers module for a list of options.
            -->
            <th><%= order_by :id %></th>
            <th><%= order_by :first_name %></th>
            <th><%= order_by :last_name %></th>
            <th><%= order_by :email %></th>
        <% @users.each do |user| %>
            <tr>
                <td><%= user.id %></td>
                <td><%= user.first_name %></td>
                <td><%= user.last_name %></td>
                <td><%= user.email %></td>
            </tr>
        <% end %>
    </table>

    <br />
    <br />
    <!--
    Per page returns a select with the different options. This is very customizable, you can change just about anything. Please take a look at the Searchgasm::Helpers documentation for options
    -->
    Per page: <%= per_page %>

    <!--
    Page returns a drop down with the page options. You can change this from a drop down to a links. It's completely customizable. Please take a look at the Searchgasm::Helpers documentation for options
    -->
    <% if @search.page_count > 1 %>
        <br />
        Page: <%= pages %>
    <% end %>
<% else %>
    No users were returned
<% end %>
